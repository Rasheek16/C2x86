   .globl test_reverse_subscript
   .text
test_reverse_subscript:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $240, %rsp
   movl $100, %r10d
   movslq %r10d, %r11
   movq %r11, -16(%rbp)
   movq -16(%rbp), %r10
   movq %r10, -48(%rbp)
   movl $102, %r10d
   movslq %r10d, %r11
   movq %r11, -56(%rbp)
   movq -56(%rbp), %r10
   movq %r10, -40(%rbp)
   movl $104, %r10d
   movslq %r10d, %r11
   movq %r11, -64(%rbp)
   movq -64(%rbp), %r10
   movq %r10, -32(%rbp)
   movl $106, %r10d
   movslq %r10d, %r11
   movq %r11, -72(%rbp)
   movq -72(%rbp), %r10
   movq %r10, -24(%rbp)
 leaq -48(%rbp),%r10
   movq %r10, -80(%rbp)
   movl $3, %r10d
   movslq %r10d, %r11
   movq %r11, -88(%rbp)
   movq -80(%rbp), %rax
   movq -88(%rbp), %rdx
   leaq (%rax,%rdx,8),  %r10
   movq %r10, -96(%rbp)
   movq -96(%rbp), %rax
   movq  0(%rax) , %r10
   movq %r10, -104(%rbp)
   movl $106, %r10d
   movslq %r10d, %r11
   movq %r11, -112(%rbp)
   movq -112(%rbp), %r10
   cmpq %r10, -104(%rbp)
   movl $0, -116(%rbp)
   setne    -116(%rbp)
   movl $0, %r10d
   cmpl %r10d, -116(%rbp)
   jne    .Ltrue_1
   movl $3, %r10d
   movslq %r10d, %r11
   movq %r11, -128(%rbp)
 leaq -48(%rbp),%r10
   movq %r10, -136(%rbp)
   movq -128(%rbp), %rax
   movq -136(%rbp), %rdx
   leaq (%rax,%rdx,8),  %r10
   movq %r10, -144(%rbp)
   movq -144(%rbp), %rax
   movq  0(%rax) , %r10
   movq %r10, -152(%rbp)
   movl $106, %r10d
   movslq %r10d, %r11
   movq %r11, -160(%rbp)
   movq -160(%rbp), %r10
   cmpq %r10, -152(%rbp)
   movl $0, -164(%rbp)
   setne    -164(%rbp)
   movl $0, %r10d
   cmpl %r10d, -164(%rbp)
   jne    .Ltrue_1
   movl $0, -168(%rbp)
   jmp  .Lend_1
.Ltrue_1:
   movl $1, -168(%rbp)
.Lend_1:
   movl $0, %r10d
   cmpl %r10d, -168(%rbp)
   je    .Lfalse_1
   movl $1, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_2
.Lfalse_1:
.Lend_2:
 leaq -48(%rbp),%r10
   movq %r10, -176(%rbp)
   movl $3, %r10d
   movslq %r10d, %r11
   movq %r11, -184(%rbp)
   movq -176(%rbp), %rax
   movq -184(%rbp), %rdx
   leaq (%rax,%rdx,8),  %r10
   movq %r10, -192(%rbp)
   movl $3, %r10d
   movslq %r10d, %r11
   movq %r11, -200(%rbp)
 leaq -48(%rbp),%r10
   movq %r10, -208(%rbp)
   movq -200(%rbp), %rax
   movq -208(%rbp), %rdx
   leaq (%rax,%rdx,8),  %r10
   movq %r10, -216(%rbp)
   movq -216(%rbp), %rax
   movq  0(%rax) , %r10
   movq %r10, -224(%rbp)
 leaq -224(%rbp),%r10
   movq %r10, -232(%rbp)
   movq -232(%rbp), %r10
   cmpq %r10, -192(%rbp)
   movl $0, -236(%rbp)
   setne    -236(%rbp)
   movl $0, %r10d
   cmpl %r10d, -236(%rbp)
   je    .Lfalse_2
   movl $1, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_3
.Lfalse_2:
.Lend_3:
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .globl main
   .text
main:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $16, %rsp
   call test_reverse_subscript
   movl %eax, -12(%rbp)
   movl -12(%rbp), %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
.section .note.GNU-stack,"",@progbits
