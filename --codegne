   .globl my_function
   .text
my_function:
   pushq   %rbp
   movq    %rsp, %rbp
    subq $48, %rsp
   movq -8(%rbp), %r10
   movq %r10, -32(%rbp)
   movq -16(%rbp), %r10
    addq %r10, -32(%rbp)
   movq -32(%rbp), %r10
   movq %r10, -40(%rbp)
   movq -24(%rbp), %r10
    addq %r10, -40(%rbp)
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .globl main
   .text
main:
   pushq   %rbp
   movq    %rsp, %rbp
    subq $208, %rsp
   movl $4, %r10d
   movslq %r10d, %r11
   movq %r11, -32(%rbp)
   movq -32(%rbp), %r10
   movq %r10, a(%rip)
   movl $0, -40(%rbp)
.Lstart_loop.2:
   movl $0, %r10d
   movslq %r10d, %r11
   movq %r11, -56(%rbp)
   movq -56(%rbp), %r10
   cmpq %r10, -48(%rbp)
   movl $0, -64(%rbp)
   setg    -64(%rbp)
   cmpl $0, -64(%rbp)
   je    .Lbreak_loop.2
   movslq -40(%rbp), %r11
   movq %r11, -72(%rbp)
   movl $1, %r10d
   movslq %r10d, %r11
   movq %r11, -80(%rbp)
   movq -72(%rbp), %r10
   movq %r10, -88(%rbp)
   movq -80(%rbp), %r10
    addq %r10, -88(%rbp)
   movl -88(%rbp), %r10d
   movl %r10d, -96(%rbp)
   movl -96(%rbp), %r10d
   movl %r10d, -40(%rbp)
.Lcontinue_loop.2:
   movl $2, %r10d
   movslq %r10d, %r11
   movq %r11, -104(%rbp)
   cqo
   idivq -104(%rbp)
   movq -112(%rbp), %r10
   movq %r10, -48(%rbp)
   jmp  .Lstart_loop.2
.Lbreak_loop.2:
   movl $1, %r10d
   movslq %r10d, %r11
   movq %r11, -120(%rbp)
   movq -120(%rbp), %r10
   cmpq %r10, -8(%rbp)
   movl $0, -128(%rbp)
   setne    -128(%rbp)
   cmpl $0, -128(%rbp)
   je    .Lfalse_1
   movl $1, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_1
.Lfalse_1:
.Lend_1:
   movl $2, %r10d
   movslq %r10d, %r11
   movq %r11, -136(%rbp)
   movq -136(%rbp), %r10
   cmpq %r10, -16(%rbp)
   movl $0, -144(%rbp)
   setne    -144(%rbp)
   cmpl $0, -144(%rbp)
   je    .Lfalse_2
   movl $2, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_2
.Lfalse_2:
.Lend_2:
   movl $4, %r10d
   movslq %r10d, %r11
   movq %r11, -152(%rbp)
   movq a(%rip), %r11
   cmpq -152(%rbp), %r11
   movl $0, -160(%rbp)
   setne    -160(%rbp)
   cmpl $0, -160(%rbp)
   je    .Lfalse_3
   movl $3, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_3
.Lfalse_3:
.Lend_3:
   call my_function
   movl %eax, -164(%rbp)
   movslq -164(%rbp), %r11
   movq %r11, -168(%rbp)
   movl $6, %r10d
   movslq %r10d, %r11
   movq %r11, -176(%rbp)
   movq -176(%rbp), %r10
   cmpq %r10, -168(%rbp)
   movl $0, -184(%rbp)
   setne    -184(%rbp)
   cmpl $0, -184(%rbp)
   je    .Lfalse_4
   movl $4, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_4
.Lfalse_4:
.Lend_4:
   movslq -40(%rbp), %r11
   movq %r11, -192(%rbp)
   movl $41, %r10d
   movslq %r10d, %r11
   movq %r11, -200(%rbp)
   movq -200(%rbp), %r10
   cmpq %r10, -192(%rbp)
   movl $0, -208(%rbp)
   setne    -208(%rbp)
   cmpl $0, -208(%rbp)
   je    .Lfalse_5
   movl $5, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_5
.Lfalse_5:
.Lend_5:
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .bss
   .align 8
a:
   .zero 4
   .zero 8
.section .note.GNU-stack,"",@progbits
