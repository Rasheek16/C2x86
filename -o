   .globl set_nth_element
   .text
set_nth_element:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $96, %rsp
   movq %rdi, -16(%rbp)
   movl %esi, -20(%rbp)
   movl $0, -24(%rbp)
.Lstart_loop.5:
   movl $5, %r10d
   cmpl %r10d, -24(%rbp)
   movl $0, -28(%rbp)
   setl    -28(%rbp)
   movl $0, %r10d
   cmpl %r10d, -28(%rbp)
   je    .Lbreak_loop.5
   movslq -24(%rbp), %r11
   movq %r11, -40(%rbp)
   movq -16(%rbp), %rax
   movq -40(%rbp), %rdx
   leaq (%eax,%edx,8),  %r10
   movq %r10, -48(%rbp)
   movq -48(%rbp), %rax
   movsd  0(%rax) , %xmm14
   movsd %xmm14, -56(%rbp)
   xorpd %xmm0,   %xmm0
   comisd    -56(%rbp), %xmm0
   je    .Lfalse_1
   movl $1, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_1
.Lfalse_1:
.Lend_1:
.Lcontinue_loop.5:
   movl -24(%rbp), %r10d
   movl %r10d, -60(%rbp)
   addl $1, -60(%rbp)
   movl -60(%rbp), %r10d
   movl %r10d, -24(%rbp)
   jmp  .Lstart_loop.5
.Lbreak_loop.5:
   movl $8, %r10d
   cvtsi2sdl   %r10d ,  %xmm15
   movsd %xmm15, -72(%rbp)
   movslq -20(%rbp), %r11
   movq %r11, -80(%rbp)
   movq -16(%rbp), %rax
   movq -80(%rbp), %rdx
   leaq (%eax,%edx,8),  %r10
   movq %r10, -88(%rbp)
   movq -88(%rbp), %rax
   movsd -72(%rbp), %xmm14
   movsd %xmm14, 0(%rax)
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .globl set_nested_element
   .text
set_nested_element:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $144, %rsp
   movq %rdi, -16(%rbp)
   movl %esi, -20(%rbp)
   movl %edx, -24(%rbp)
   movl $0, -28(%rbp)
.Lstart_loop.6:
   movl $3, %r10d
   cmpl %r10d, -28(%rbp)
   movl $0, -32(%rbp)
   setl    -32(%rbp)
   movl $0, %r10d
   cmpl %r10d, -32(%rbp)
   je    .Lbreak_loop.6
   movl $0, -36(%rbp)
.Lstart_loop.7:
   movl $2, %r10d
   cmpl %r10d, -36(%rbp)
   movl $0, -40(%rbp)
   setl    -40(%rbp)
   movl $0, %r10d
   cmpl %r10d, -40(%rbp)
   je    .Lbreak_loop.7
   movl $10, -44(%rbp)
   movl -44(%rbp), %r10d
   negl %r10d
   movl %r10d, -44(%rbp)
   movl $2, -48(%rbp)
   movl -48(%rbp), %r11d
   imull -28(%rbp), %r11d
   movl %r11d, -48(%rbp)
   movl -44(%rbp), %r10d
   movl %r10d, -52(%rbp)
   movl -48(%rbp), %r10d
   addl %r10d, -52(%rbp)
   movl -52(%rbp), %r10d
   movl %r10d, -56(%rbp)
   movl -36(%rbp), %r10d
   addl %r10d, -56(%rbp)
   movl -56(%rbp), %r10d
   movl %r10d, -60(%rbp)
   movslq -28(%rbp), %r11
   movq %r11, -72(%rbp)
   movq -16(%rbp), %rax
   movq -72(%rbp), %rdx
   leaq (%eax,%edx,4),  %r10
   movq %r10, -80(%rbp)
   movslq -36(%rbp), %r11
   movq %r11, -88(%rbp)
   movq -80(%rbp), %rax
   movq -88(%rbp), %rdx
   leaq (%eax,%edx,4),  %r10
   movq %r10, -96(%rbp)
   movq -96(%rbp), %rax
   movl  0(%rax) , %r10d
   movl %r10d, -100(%rbp)
   movl -60(%rbp), %r10d
   cmpl %r10d, -100(%rbp)
   movl $0, -104(%rbp)
   setne    -104(%rbp)
   movl $0, %r10d
   cmpl %r10d, -104(%rbp)
   je    .Lfalse_2
   movl $4, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_2
.Lfalse_2:
.Lend_2:
.Lcontinue_loop.7:
   movl -36(%rbp), %r10d
   movl %r10d, -108(%rbp)
   addl $1, -108(%rbp)
   movl -108(%rbp), %r10d
   movl %r10d, -36(%rbp)
   jmp  .Lstart_loop.7
.Lbreak_loop.7:
.Lcontinue_loop.6:
   movl -28(%rbp), %r10d
   movl %r10d, -112(%rbp)
   addl $1, -112(%rbp)
   movl -112(%rbp), %r10d
   movl %r10d, -28(%rbp)
   jmp  .Lstart_loop.6
.Lbreak_loop.6:
   movslq -20(%rbp), %r11
   movq %r11, -120(%rbp)
   movq -16(%rbp), %rax
   movq -120(%rbp), %rdx
   leaq (%eax,%edx,4),  %r10
   movq %r10, -128(%rbp)
   movslq -24(%rbp), %r11
   movq %r11, -136(%rbp)
   movq -128(%rbp), %rax
   movq -136(%rbp), %rdx
   leaq (%eax,%edx,4),  %r10
   movq %r10, -144(%rbp)
   movq -144(%rbp), %rax
   movl $10, 0(%rax)
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
.section .note.GNU-stack,"",@progbits
