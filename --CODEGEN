   .globl int_to_ulong
   .text
int_to_ulong:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $32, %rsp
   movl %edi, -12(%rbp)
   movl %esi, -16(%rbp)
   movslq -12(%rbp), %r11
   movq %r11, -20(%rbp)
   movq -20(%rbp), %r10
   movq %r10, -24(%rbp)
   movq -16(%rbp), %r10
   cmpq %r10, -24(%rbp)
   movl $0, -28(%rbp)
   sete    -28(%rbp)
   movl -28(%rbp), %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .globl uint_to_long
   .text
uint_to_long:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $48, %rsp
   movl %edi, -12(%rbp)
   movq %rsi, -24(%rbp)
   movl -12(%rbp), %r11d
   movq %r11, -32(%rbp)
   movq -32(%rbp), %r10
   movq %r10, -40(%rbp)
   movq -24(%rbp), %r10
   cmpq %r10, -40(%rbp)
   movl $0, -44(%rbp)
   sete    -44(%rbp)
   movl -44(%rbp), %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .globl uint_to_ulong
   .text
uint_to_ulong:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $16, %rsp
   movl %edi, -12(%rbp)
   movl %esi, -16(%rbp)
   movl -12(%rbp), %r11d
   movq %r11, -20(%rbp)
   movq -16(%rbp), %r10
   cmpq %r10, -20(%rbp)
   movl $0, -24(%rbp)
   sete    -24(%rbp)
   movl -24(%rbp), %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .globl main
   .text
main:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $48, %rsp
   movl $10, %edi
   movq $10, %rsi
   call int_to_ulong
   movl %eax, -12(%rbp)
   cmpl $0, -12(%rbp)
   movl $0, -16(%rbp)
   sete    -16(%rbp)
   cmpl $0, -16(%rbp)
   je    .Lfalse_1
   movl $1, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_1
.Lfalse_1:
.Lend_1:
   movl $10, -20(%rbp)
   movl -20(%rbp), %r10d
   negl %r10d
   movl %r10d, -20(%rbp)
   movl -20(%rbp), %edi
   movq $18446744073709551606, %rsi
   call int_to_ulong
   movl %eax, -24(%rbp)
   cmpl $0, -24(%rbp)
   movl $0, -28(%rbp)
   sete    -28(%rbp)
   cmpl $0, -28(%rbp)
   je    .Lfalse_2
   movl $2, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_2
.Lfalse_2:
.Lend_2:
   movq $4294967200, %r10
   movl %r10d, %edi
   movq $4294967200, %rsi
   call uint_to_long
   movl %eax, -32(%rbp)
   cmpl $0, -32(%rbp)
   movl $0, -36(%rbp)
   sete    -36(%rbp)
   cmpl $0, -36(%rbp)
   je    .Lfalse_3
   movl $3, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_3
.Lfalse_3:
.Lend_3:
   movq $4294967200, %r10
   movl %r10d, %edi
   movq $4294967200, %rsi
   call uint_to_ulong
   movl %eax, -40(%rbp)
   cmpl $0, -40(%rbp)
   movl $0, -44(%rbp)
   sete    -44(%rbp)
   cmpl $0, -44(%rbp)
   je    .Lfalse_4
   movl $4, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_4
.Lfalse_4:
.Lend_4:
   movl $4294967200, %r11d
   movq %r11, -48(%rbp)
   movq $4294967200, %r10
   cmpq %r10, -48(%rbp)
   movl $0, -52(%rbp)
   setne    -52(%rbp)
   cmpl $0, -52(%rbp)
   je    .Lfalse_5
   movl $5, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_5
.Lfalse_5:
.Lend_5:
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
.section .note.GNU-stack,"",@progbits
