   .globl read_nested
   .text
read_nested:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $80, %rsp
   movq %rdi, -16(%rbp)
   movl %esi, -20(%rbp)
   movl %edx, -24(%rbp)
   movl %ecx, -28(%rbp)
   movslq -20(%rbp), %r11
   movq %r11, -40(%rbp)
   movq -16(%rbp), %rax
   movq -40(%rbp), %rdx
   movq %rdx, %r11
   imulq $12, %r11
   movq %r11, %rdx
   leaq (%rax,%rdx,1),  %r10
   movq %r10, -48(%rbp)
   movslq -24(%rbp), %r11
   movq %r11, -56(%rbp)
   movq -48(%rbp), %rax
   movq -56(%rbp), %rdx
   leaq (%rax,%rdx,4),  %r10
   movq %r10, -64(%rbp)
   movq -64(%rbp), %rax
   movl  0(%rax) , %r10d
   movl %r10d, -68(%rbp)
   movl -28(%rbp), %r10d
   cmpl %r10d, -68(%rbp)
   movl $0, -72(%rbp)
   sete    -72(%rbp)
   movl -72(%rbp), %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .globl write_nested
   .text
write_nested:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $80, %rsp
   movq %rdi, -16(%rbp)
   movl %esi, -20(%rbp)
   movl %edx, -24(%rbp)
   movl %ecx, -28(%rbp)
   movslq -20(%rbp), %r11
   movq %r11, -40(%rbp)
   movq -16(%rbp), %rax
   movq -40(%rbp), %rdx
   movq %rdx, %r11
   imulq $12, %r11
   movq %r11, %rdx
   leaq (%rax,%rdx,1),  %r10
   movq %r10, -48(%rbp)
   movslq -24(%rbp), %r11
   movq %r11, -56(%rbp)
   movq -48(%rbp), %rax
   movq -56(%rbp), %rdx
   leaq (%rax,%rdx,4),  %r10
   movq %r10, -64(%rbp)
   movq -64(%rbp), %rax
   movl -28(%rbp), %r10d
   movl %r10d, 0(%rax)
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .globl read_nested_negated
   .text
read_nested_negated:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $80, %rsp
   movq %rdi, -16(%rbp)
   movl %esi, -20(%rbp)
   movl %edx, -24(%rbp)
   movl %ecx, -28(%rbp)
   movl -20(%rbp), %r10d
   movl %r10d, -32(%rbp)
   movl -32(%rbp), %r10d
   negl %r10d
   movl %r10d, -32(%rbp)
   movslq -32(%rbp), %r11
   movq %r11, -40(%rbp)
   movq -16(%rbp), %rax
   movq -40(%rbp), %rdx
   movq %rdx, %r11
   imulq $12, %r11
   movq %r11, %rdx
   leaq (%rax,%rdx,1),  %r10
   movq %r10, -48(%rbp)
   movslq -24(%rbp), %r11
   movq %r11, -56(%rbp)
   movq -48(%rbp), %rax
   movq -56(%rbp), %rdx
   leaq (%rax,%rdx,4),  %r10
   movq %r10, -64(%rbp)
   movq -64(%rbp), %rax
   movl  0(%rax) , %r10d
   movl %r10d, -68(%rbp)
   movl -28(%rbp), %r10d
   cmpl %r10d, -68(%rbp)
   movl $0, -72(%rbp)
   sete    -72(%rbp)
   movl -72(%rbp), %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .globl get_nested_addr
   .text
get_nested_addr:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $96, %rsp
   movq %rdi, -16(%rbp)
   movl %esi, -20(%rbp)
   movl %edx, -24(%rbp)
   movq %rcx, -32(%rbp)
   movslq -20(%rbp), %r11
   movq %r11, -40(%rbp)
   movq -16(%rbp), %rax
   movq -40(%rbp), %rdx
   movq %rdx, %r11
   imulq $12, %r11
   movq %r11, %rdx
   leaq (%rax,%rdx,1),  %r10
   movq %r10, -48(%rbp)
   movslq -24(%rbp), %r11
   movq %r11, -56(%rbp)
   movq -48(%rbp), %rax
   movq -56(%rbp), %rdx
   leaq (%rax,%rdx,4),  %r10
   movq %r10, -64(%rbp)
   movq -64(%rbp), %rax
   movq  0(%rax) , %r10
   movq %r10, -72(%rbp)
 leaq -72(%rbp),%r10
   movq %r10, -80(%rbp)
   movq -32(%rbp), %r10
   cmpq %r10, -80(%rbp)
   movl $0, -84(%rbp)
   sete    -84(%rbp)
   movl -84(%rbp), %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .globl read_static_nested
   .text
read_static_nested:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $96, %rsp
   movl %edi, -12(%rbp)
   movl %esi, -16(%rbp)
   movl %edx, -20(%rbp)
   movl %ecx, -24(%rbp)
 leaq nested_arr(%rip),%r10
   movq %r10, -32(%rbp)
   movslq -12(%rbp), %r11
   movq %r11, -40(%rbp)
   movq -32(%rbp), %rax
   movq -40(%rbp), %rdx
   movq %rdx, %r11
   imulq $60, %r11
   movq %r11, %rdx
   leaq (%rax,%rdx,1),  %r10
   movq %r10, -48(%rbp)
   movslq -16(%rbp), %r11
   movq %r11, -56(%rbp)
   movq -48(%rbp), %rax
   movq -56(%rbp), %rdx
   movq %rdx, %r11
   imulq $20, %r11
   movq %r11, %rdx
   leaq (%rax,%rdx,1),  %r10
   movq %r10, -64(%rbp)
   movslq -20(%rbp), %r11
   movq %r11, -72(%rbp)
   movq -64(%rbp), %rax
   movq -72(%rbp), %rdx
   leaq (%rax,%rdx,4),  %r10
   movq %r10, -80(%rbp)
   movq -80(%rbp), %rax
   movl  0(%rax) , %r10d
   movl %r10d, -84(%rbp)
   movl -24(%rbp), %r10d
   cmpl %r10d, -84(%rbp)
   movl $0, -88(%rbp)
   sete    -88(%rbp)
   movl -88(%rbp), %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .globl get_array
   .text
get_array:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $32, %rsp
 leaq nested_arr(%rip),%r10
   movq %r10, -16(%rbp)
   movq -16(%rbp), %rax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .globl write_nested_complex
   .text
write_nested_complex:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $96, %rsp
   movl %edi, -12(%rbp)
   movl %esi, -16(%rbp)
   movl %edx, -20(%rbp)
   movl %ecx, -24(%rbp)
   call get_array
   movq %rax, -32(%rbp)
   movslq -12(%rbp), %r11
   movq %r11, -40(%rbp)
   movq -32(%rbp), %rax
   movq -40(%rbp), %rdx
   movq %rdx, %r11
   imulq $60, %r11
   movq %r11, %rdx
   leaq (%rax,%rdx,1),  %r10
   movq %r10, -48(%rbp)
   movslq -16(%rbp), %r11
   movq %r11, -56(%rbp)
   movq -48(%rbp), %rax
   movq -56(%rbp), %rdx
   movq %rdx, %r11
   imulq $20, %r11
   movq %r11, %rdx
   leaq (%rax,%rdx,1),  %r10
   movq %r10, -64(%rbp)
   movslq -20(%rbp), %r11
   movq %r11, -72(%rbp)
   movq -64(%rbp), %rax
   movq -72(%rbp), %rdx
   leaq (%rax,%rdx,4),  %r10
   movq %r10, -80(%rbp)
   movq -80(%rbp), %rax
   movl -24(%rbp), %r10d
   movl %r10d, 0(%rax)
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .globl get_subarray
   .text
get_subarray:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $48, %rsp
   movq %rdi, -16(%rbp)
   movl %esi, -20(%rbp)
   movslq -20(%rbp), %r11
   movq %r11, -32(%rbp)
   movq -16(%rbp), %rax
   movq -32(%rbp), %rdx
   movq %rdx, %r11
   imulq $12, %r11
   movq %r11, %rdx
   leaq (%rax,%rdx,1),  %r10
   movq %r10, -40(%rbp)
   movq -40(%rbp), %rax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .globl main
   .text
main:
   pushq   %rbp
   movq    %rsp, %rbp
   subq $400, %rsp
   movl $1, -16(%rbp)
   movl $2, -12(%rbp)
   movl $3, -8(%rbp)
   movl $4, -4(%rbp)
   movl $5, 0(%rbp)
   movl $6, 4(%rbp)
 leaq -16(%rbp),%r10
   movq %r10, -24(%rbp)
   movq -24(%rbp), %rdi
   movl $1, %esi
   movl $2, %edx
   movl $6, %ecx
   call read_nested
   movl %eax, -28(%rbp)
   movl $0, %r10d
   cmpl %r10d, -28(%rbp)
   movl $0, -32(%rbp)
   sete    -32(%rbp)
   movl $0, %r10d
   cmpl %r10d, -32(%rbp)
   je    .Lfalse_1
   movl $1, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_1
.Lfalse_1:
.Lend_1:
 leaq -16(%rbp),%r10
   movq %r10, -40(%rbp)
   movl $1, -44(%rbp)
   movl -44(%rbp), %r10d
   negl %r10d
   movl %r10d, -44(%rbp)
   movq -40(%rbp), %rdi
   movl $1, %esi
   movl $2, %edx
   movl -44(%rbp), %ecx
   call write_nested
   movl %eax, -48(%rbp)
 leaq -16(%rbp),%r10
   movq %r10, -56(%rbp)
   movl $1, %r10d
   movslq %r10d, %r11
   movq %r11, -64(%rbp)
   movq -56(%rbp), %rax
   movq -64(%rbp), %rdx
   movq %rdx, %r11
   imulq $12, %r11
   movq %r11, %rdx
   leaq (%rax,%rdx,1),  %r10
   movq %r10, -72(%rbp)
   movl $2, %r10d
   movslq %r10d, %r11
   movq %r11, -80(%rbp)
   movq -72(%rbp), %rax
   movq -80(%rbp), %rdx
   leaq (%rax,%rdx,4),  %r10
   movq %r10, -88(%rbp)
   movq -88(%rbp), %rax
   movl  0(%rax) , %r10d
   movl %r10d, -92(%rbp)
   movl $1, -96(%rbp)
   movl -96(%rbp), %r10d
   negl %r10d
   movl %r10d, -96(%rbp)
   movl -96(%rbp), %r10d
   cmpl %r10d, -92(%rbp)
   movl $0, -100(%rbp)
   setne    -100(%rbp)
   movl $0, %r10d
   cmpl %r10d, -100(%rbp)
   je    .Lfalse_2
   movl $2, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_2
.Lfalse_2:
.Lend_2:
 leaq -16(%rbp),%r10
   movq %r10, -112(%rbp)
   movl $2, %r10d
   movslq %r10d, %r11
   movq %r11, -120(%rbp)
   movq -112(%rbp), %rax
   movq -120(%rbp), %rdx
   movq %rdx, %r11
   imulq $12, %r11
   movq %r11, %rdx
   leaq (%rax,%rdx,1),  %r10
   movq %r10, -128(%rbp)
   movq -128(%rbp), %rdi
   movl $2, %esi
   movl $0, %edx
   movl $1, %ecx
   call read_nested_negated
   movl %eax, -132(%rbp)
   movl $0, %r10d
   cmpl %r10d, -132(%rbp)
   movl $0, -136(%rbp)
   sete    -136(%rbp)
   movl $0, %r10d
   cmpl %r10d, -136(%rbp)
   je    .Lfalse_3
   movl $3, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_3
.Lfalse_3:
.Lend_3:
 leaq -16(%rbp),%r10
   movq %r10, -144(%rbp)
   movl $0, %r10d
   movslq %r10d, %r11
   movq %r11, -152(%rbp)
   movq -144(%rbp), %rax
   movq -152(%rbp), %rdx
   movq %rdx, %r11
   imulq $12, %r11
   movq %r11, %rdx
   leaq (%rax,%rdx,1),  %r10
   movq %r10, -160(%rbp)
   movl $1, %r10d
   movslq %r10d, %r11
   movq %r11, -168(%rbp)
   movq -160(%rbp), %rax
   movq -168(%rbp), %rdx
   leaq (%rax,%rdx,4),  %r10
   movq %r10, -176(%rbp)
   movq -176(%rbp), %r10
   movq %r10, -184(%rbp)
 leaq -16(%rbp),%r10
   movq %r10, -192(%rbp)
   movq -192(%rbp), %rdi
   movl $0, %esi
   movl $1, %edx
   movq -184(%rbp), %rcx
   call get_nested_addr
   movl %eax, -196(%rbp)
   movl $0, %r10d
   cmpl %r10d, -196(%rbp)
   movl $0, -200(%rbp)
   sete    -200(%rbp)
   movl $0, %r10d
   cmpl %r10d, -200(%rbp)
   je    .Lfalse_4
   movl $4, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_4
.Lfalse_4:
.Lend_4:
   movl $1, %edi
   movl $1, %esi
   movl $0, %edx
   movl $5, %ecx
   call read_static_nested
   movl %eax, -204(%rbp)
   movl $0, %r10d
   cmpl %r10d, -204(%rbp)
   movl $0, -208(%rbp)
   sete    -208(%rbp)
   movl $0, %r10d
   cmpl %r10d, -208(%rbp)
   je    .Lfalse_5
   movl $5, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_5
.Lfalse_5:
.Lend_5:
   movl $0, %edi
   movl $2, %esi
   movl $3, %edx
   movl $111, %ecx
   call write_nested_complex
   movl %eax, -212(%rbp)
   call get_array
   movq %rax, -224(%rbp)
   movl $0, %r10d
   movslq %r10d, %r11
   movq %r11, -232(%rbp)
   movq -224(%rbp), %rax
   movq -232(%rbp), %rdx
   movq %rdx, %r11
   imulq $60, %r11
   movq %r11, %rdx
   leaq (%rax,%rdx,1),  %r10
   movq %r10, -240(%rbp)
   movl $2, %r10d
   movslq %r10d, %r11
   movq %r11, -248(%rbp)
   movq -240(%rbp), %rax
   movq -248(%rbp), %rdx
   movq %rdx, %r11
   imulq $20, %r11
   movq %r11, %rdx
   leaq (%rax,%rdx,1),  %r10
   movq %r10, -256(%rbp)
   movl $3, %r10d
   movslq %r10d, %r11
   movq %r11, -264(%rbp)
   movq -256(%rbp), %rax
   movq -264(%rbp), %rdx
   leaq (%rax,%rdx,4),  %r10
   movq %r10, -272(%rbp)
   movq -272(%rbp), %rax
   movl  0(%rax) , %r10d
   movl %r10d, -276(%rbp)
   movl $111, %r10d
   cmpl %r10d, -276(%rbp)
   movl $0, -280(%rbp)
   setne    -280(%rbp)
   movl $0, %r10d
   cmpl %r10d, -280(%rbp)
   je    .Lfalse_6
   movl $6, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_6
.Lfalse_6:
.Lend_6:
 leaq -16(%rbp),%r10
   movq %r10, -288(%rbp)
   movq -288(%rbp), %rdi
   movl $1, %esi
   call get_subarray
   movq %rax, -296(%rbp)
   movq -296(%rbp), %r10
   movq %r10, -304(%rbp)
   movl $1, %r10d
   movslq %r10d, %r11
   movq %r11, -312(%rbp)
   movq -304(%rbp), %rax
   movq -312(%rbp), %rdx
   leaq (%rax,%rdx,4),  %r10
   movq %r10, -320(%rbp)
 leaq -16(%rbp),%r10
   movq %r10, -328(%rbp)
   movl $1, %r10d
   movslq %r10d, %r11
   movq %r11, -336(%rbp)
   movq -328(%rbp), %rax
   movq -336(%rbp), %rdx
   movq %rdx, %r11
   imulq $12, %r11
   movq %r11, %rdx
   leaq (%rax,%rdx,1),  %r10
   movq %r10, -344(%rbp)
   movl $1, %r10d
   movslq %r10d, %r11
   movq %r11, -352(%rbp)
   movq -344(%rbp), %rax
   movq -352(%rbp), %rdx
   leaq (%rax,%rdx,4),  %r10
   movq %r10, -360(%rbp)
   movq -360(%rbp), %rax
   movq  0(%rax) , %r10
   movq %r10, -368(%rbp)
 leaq -368(%rbp),%r10
   movq %r10, -376(%rbp)
   movq -376(%rbp), %r10
   cmpq %r10, -320(%rbp)
   movl $0, -380(%rbp)
   setne    -380(%rbp)
   movl $0, %r10d
   cmpl %r10d, -380(%rbp)
   je    .Lfalse_7
   movl $7, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   jmp  .Lend_7
.Lfalse_7:
.Lend_7:
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   movl $0, %eax
   movq   %rbp, %rsp
   popq   %rbp
   ret
   .data
   .align 8
nested_arr:
   .long 1
   .long 2
   .zero 4
   .zero 4
   .zero 4
   .long 3
   .zero 4
   .zero 4
   .zero 4
   .zero 4
    .zero 4
    .zero 4
    .zero 4
    .zero 4
    .zero 4
   .long 4
   .zero 4
   .zero 4
   .zero 4
   .zero 4
   .long 5
   .zero 4
   .zero 4
   .zero 4
   .zero 4
    .zero 4
    .zero 4
    .zero 4
    .zero 4
    .zero 4
   .zero 4
    .zero 4
    .zero 4
    .zero 4
    .zero 4
    .zero 20
    .zero 20
   .zero 4
    .zero 4
    .zero 4
    .zero 4
    .zero 4
    .zero 20
    .zero 20
.section .note.GNU-stack,"",@progbits
